这次从一个简单的想法到最终成功实现，整个过程堪称一次微缩版的嵌入式项目开发之旅，涵盖了从硬件到软件，从编码到调试的方方面面。

项目总结：基于STM32的旋转编码器OLED显示器
1. 项目目标

使用STM32F103C8T6最小系统板，通过EC11旋转编码器控制0.96寸I2C OLED屏幕上数值的加减，并在Keil MDK环境下完成软件开发。

2. 硬件实现

核心控制器：STM32F103C8T6

输入设备：旋转编码器 (EC11模块)

输出设备：0.96寸 I2C OLED (SSD1306驱动)

连接方案：

供电：所有模块（STM32, OLED, 编码器）共享3.3V和GND。

OLED (I2C)：SCL -> PB6 (I2C1_SCL), SDA -> PB7 (I2C1_SDA)。

编码器 (GPIO & 中断)：CLK (A相) -> PA0, DT (B相) -> PA1。

这个硬件方案是经典且高效的，正确利用了STM32的硬件I2C外设和GPIO外部中断功能。

3. 软件实现

开发环境：Keil MDK + STM32CubeMX

底层驱动：STM32 HAL库

核心逻辑：

STM32CubeMX配置：

配置RCC，使用HSE（外部高速时钟）并通过PLL倍频至72MHz，以获取最高性能。

配置I2C1为标准I2C模式，用于驱动OLED。

配置PA0为上升沿触发的外部中断 (GPIO_EXTI0)，并开启上拉。

配置PA1为普通输入模式，并开启上拉。

在NVIC中使能EXTI0中断。

OLED驱动：

移植了第三方SSD1306开源库。

在主循环while(1)中，通过“清空缓冲区 -> 写入字符串 -> 更新屏幕”的“重绘法”模式，持续刷新显示内容。

编码器逻辑：

在HAL_GPIO_EXTI_Callback中断服务函数中实现核心逻辑。

当PA0(CLK)触发上升沿中断时，立即读取PA1(DT)的电平。

根据PA1的高低电平，判断编码器的旋转方向（顺时针/逆时针），并对全局变量counter进行加减操作。

使用volatile关键字修饰counter，确保主循环和中断都能正确访问最新的值。

4. 调试与问题解决全过程复盘

这是本次项目中最有价值的部分，我们经历了一系列经典的调试挑战：

编译错误阶段 - "找不到文件"：

问题：cannot open source input file "_ansi.h", "ssd1306_conf.h", "stm32f0xx_hal.h"。

根源：这是典型的第三方库移植问题。库文件的编写环境（如GCC）与我们的Keil(ARMCC)不同，或者库文件需要用户手动配置。

解决：通过逐步分析错误信息，我们进行了：

注释掉非Keil环境所需的_ansi.h。

添加并配置了缺失的ssd1306_conf.h。

通过修改ssd1306.h或在Keil中定义宏 (STM32F1)，最终通过强制包含stm32f1xx_hal.h 的方式，解决了因芯片系列宏判断错误导致的问题。

教训：移植第三方库时，必须仔细阅读其说明，并理解其头文件包含逻辑和配置方式。不能简单地“拿来就用”。

编译错误阶段 - "语法错误雪崩"：

问题：出现大量关于IRQn_Type未定义等几十个错误。

根源：ssd1306.h中存在Keil不认识的宏 _BEGIN_STD_C / _END_STD_C，导致第一个语法错误，引发了编译器后续解析的全面崩溃。

解决：删除了这两个非必需的宏，所有连锁错误瞬间消失。

教训：当出现海量看似无关的编译错误时，永远优先关注第一个错误，它往往是所有问题的根源。

运行逻辑错误阶段 - "亮一下就黑屏"：

第一轮诊断：怀疑while(1)循环未执行屏幕刷新。

问题：由于代码未严格按照CubeMX的注释规范放置，导致while(1)循环体可能被解析为空，刷新代码被置于循环之外，永远无法执行。

解决：严格按照CubeMX的规范，将所有循环代码放入/* USER CODE BEGIN 3 */和/* USER CODE END 3 */之间，确保代码结构正确。

硬件/物理层调试阶段 - "代码正确但现象依旧"：

最终诊断：在使用Keil调试器单步跟踪后，确认软件逻辑（包括I2C通信函数调用）完全正常，循环也在持续运行。

根源：问题被锁定在软件无法触及的物理层面。推断是I2C总线不稳定（因缺少强上拉电阻）或物理连接接触不良。

解决：通过重新插拔所有连接器，暂时解决了接触不良问题，使系统恢复正常。

教训：当用调试器确认软件逻辑无误后，必须立刻将排查方向转向硬件。“重新插拔大法” 和 “检查焊接/连接” 是硬件工程师的必备技能。同时，理解I2C等通信协议对硬件（如上拉电阻）的要求至关重要。

最终成果与收获

成果：成功构建了一个功能完备、响应精确的硬件交互系统。它不仅能用，而且通过我们的不断优化，代码结构和显示效果也变得更好。

收获：

全流程经验：完整体验了从需求分析、硬件选型、软件配置、编码实现到多层次调试的全过程。

调试能力提升：学会了如何阅读编译错误、分析逻辑错误、使用调试器单步跟踪，以及判断问题是源于软件还是硬件。

规范化意识：理解了遵循代码框架（如CubeMX注释）和硬件设计规范（如I2C上拉电阻）的重要性。